What happens when you initialize a repository? Why do you need to do it?

   The .git directory was created in order to store metadata that keeps tracks of files in the current directory.

How is the staging area different from the working directory and the repository?
What value do you think it offers?

   Staging area does not store data(files or snapshot of files). It allows you to manage which files will be committed. Without it, you will have to keep tracks of every file you want it to be committed next when you want to commit changes to your repository.

How can you use the staging area to make sure you have one commit per logical
change?

   I can run "git diff --staged" to see difference between the last commit and what is about to be committed, so I know exactly what I am going to commit. I can use "git reset" to remove files from staging area if needed, too.

What are some situations when branches would be helpful in keeping your history
organized? How would branches help?

   When there are 2 new experimental features in development simultaneously, giving each its own branch makes it more clear on what are being done in each feature development.

How do the diagrams help you visualize the branch structure?

   It shows how each branch connected, while git log only shows commits of the current branch.

What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?

   The result of merging is a single commit, and it refers to both tips of the branches hence the diagram drawn that way.

What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges
manually?
